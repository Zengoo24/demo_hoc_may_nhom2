import streamlit as st
import numpy as np
import joblib
from collections import deque
import warnings
import sys

# ==============================
# C·∫§U H√åNH (S·ª≠ d·ª•ng l·∫°i t·ª´ code g·ªëc)
# ==============================
MODEL_PATH = "softmax_model_best1.pkl"
SCALER_PATH = "scale1.pkl"
SMOOTH_WINDOW = 5
BLINK_THRESHOLD = 0.20
EPS = 1e-8
N_FEATURES = 10  # S·ªê L∆Ø·ª¢NG ƒê·∫∂C TR∆ØNG MONG ƒê·ª¢I: 10

# ==============================
# LOAD MODEL V√Ä SCALER
# ==============================
@st.cache_resource
def load_resources():
    """T·∫£i model v√† scaler, d√πng st.cache_resource ƒë·ªÉ ch·ªâ t·∫£i 1 l·∫ßn."""
    try:
        model_data = joblib.load(MODEL_PATH)
        W = model_data["W"]
        b = model_data["b"]
        CLASSES = model_data["classes"]

        scaler_data = joblib.load(SCALER_PATH)
        X_mean = scaler_data["X_mean"]
        X_std = scaler_data["X_std"]

        idx2label = {i: lbl for i, lbl in enumerate(CLASSES)}

        if W.shape[0] != N_FEATURES:
            st.error(
                f"L·ªói: K√≠ch th∆∞·ªõc ƒë·∫∑c tr∆∞ng c·ªßa m√¥ h√¨nh ({W.shape[0]}) kh√¥ng kh·ªõp v·ªõi s·ªë ƒë·∫∑c tr∆∞ng ({N_FEATURES})."
            )
            sys.exit()

        return W, b, CLASSES, X_mean, X_std, idx2label

    except FileNotFoundError as e:
        st.error(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file t√†i nguy√™n: {e}. Vui l√≤ng ki·ªÉm tra file .pkl.")
        st.stop()
    except Exception as e:
        st.error(f"L·ªñI LOAD D·ªÆ LI·ªÜU: {e}")
        st.stop()


# Load t√†i nguy√™n
W, b, CLASSES, X_mean, X_std, idx2label = load_resources()

# ==============================
# H√ÄM D·ª∞ ƒêO√ÅN (S·ª≠ d·ª•ng l·∫°i t·ª´ code g·ªëc)
# ==============================
def softmax(z):
    z = z - np.max(z)
    exp_z = np.exp(z)
    return exp_z / (np.sum(exp_z) + EPS)

def predict_proba(x):
    if x.ndim == 1:
        x = x.reshape(1, -1)
    z = np.dot(x, W) + b
    return softmax(z)

# ==============================
# ·ª®NG D·ª§NG STREAMLIT
# ==============================
st.set_page_config(
    page_title="DMS Softmax Mock-up (10 Feats)",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üëÅÔ∏è H·ªá th·ªëng Gi√°m s√°t T√†i x·∫ø (DMS) - Softmax Mock-up")
st.markdown("---")

# Dictionary m√¥ t·∫£ 10 ƒë·∫∑c tr∆∞ng
FEATURE_DESC = {
    0: "EAR_L (Eye Aspect Ratio - Left)",
    1: "EAR_R (Eye Aspect Ratio - Right)",
    2: "MAR (Mouth Aspect Ratio)",
    3: "YAW (Quay ngang ƒë·∫ßu)",
    4: "PITCH (C√∫i/Ng·ª≠a ƒë·∫ßu)",
    5: "ROLL (Nghi√™ng ƒë·∫ßu)",
    6: "ANGLE_PITCH_EXTRA (G√≥c Ng·ª≠a/C√∫i - D·ª±a tr√™n Chin/Nose Z)",
    7: "DELTA_EAR (Thay ƒë·ªïi EAR)",
    8: "FOREHEAD_Y (T·ªça ƒë·ªô Y tr√°n)",
    9: "DELTA_PITCH (Thay ƒë·ªïi PITCH - Cho Nod)",
}

# --- SIDEBAR: C·∫§U H√åNH V√Ä SIMULATION ---
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh & Gi·∫£ l·∫≠p")
    st.subheader("Tham s·ªë Heuristic")
    thresh = st.slider("BLINK_THRESHOLD", 0.05, 0.40, BLINK_THRESHOLD, 0.01)

    st.subheader("Nh·∫≠p ƒê·∫∑c tr∆∞ng Th·ªß c√¥ng")
    st.markdown("‚ö†Ô∏è *Nh·∫≠p 10 gi√° tr·ªã ƒë·∫∑c tr∆∞ng ƒë·ªÉ ki·ªÉm tra m√¥ h√¨nh.*")

    # T·∫°o c√°c slider/number_input cho 10 ƒë·∫∑c tr∆∞ng
    features_input = {}
    default_vals = [0.3, 0.3, 0.05, 0.0, 0.0, 0.0, 90.0, 0.0, 200.0, 0.0]
    ranges = [(0.0, 1.0), (0.0, 1.0), (0.0, 1.0), (-30.0, 30.0), (-30.0, 30.0), (-30.0, 30.0), (60.0, 120.0), (-0.2, 0.2), (100.0, 400.0), (-0.2, 0.2)]

    for i in range(N_FEATURES):
        key = FEATURE_DESC[i].split(' ')[0]
        min_v, max_v = ranges[i]
        features_input[i] = st.number_input(
            f"{i+1}. {FEATURE_DESC[i]} ({key})",
            value=float(default_vals[i]),
            min_value=min_v,
            max_value=max_v,
            step=0.01 if ranges[i][1] < 1 else 1.0,
            format="%.4f"
        )

    feats = np.array([features_input[i] for i in range(N_FEATURES)], dtype=np.float32)


# --- MAIN CONTENT: HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---

col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üìä Gi√° tr·ªã ƒê·∫∑c tr∆∞ng Hi·ªán t·∫°i")
    feature_data = {
        "ƒê·∫∑c tr∆∞ng": [FEATURE_DESC[i] for i in range(N_FEATURES)],
        "Gi√° tr·ªã": [f"{f:.4f}" for f in feats]
    }
    st.dataframe(feature_data, use_container_width=True, hide_index=True)


with col2:
    st.subheader("üß† K·∫øt qu·∫£ D·ª± ƒëo√°n")

    ear_avg = (feats[0] + feats[1]) / 2.0
    current_pred_label = "unknown"

    # 1. √ÅP D·ª§NG LU·∫¨T C·ª®NG (HEURISTIC) CHO BLINK
    st.write(f"**Trung b√¨nh EAR (L+R)/2:** {ear_avg:.4f}")
    if ear_avg < thresh:
        current_pred_label = "blink"
        st.warning(f"üö® **PH√ÅT HI·ªÜN BLINK** (EAR < {thresh})")
        st.markdown(f"**Ph√°n ƒëo√°n Cu·ªëi c√πng:** <span style='font-size: 30px; color: yellow; background-color: darkred; padding: 5px; border-radius: 5px;'>{current_pred_label.upper()}</span>", unsafe_allow_html=True)
    else:
        # 2. D√πng Softmax cho c√°c h√†nh vi kh√°c

        st.info("üí° √Åp d·ª•ng Softmax...")
        
        # CHU·∫®N H√ìA
        feats_scaled = (feats - X_mean[:N_FEATURES]) / (X_std[:N_FEATURES] + EPS)

        # D·ª∞ ƒêO√ÅN Softmax
        probs = predict_proba(feats_scaled)
        probs = np.array(probs).flatten()
        pred_idx = np.argmax(probs)
        current_pred_label = idx2label[pred_idx]

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ Softmax
        color_map = {"nod": "green", "yawn": "orange", "smile": "blue", "unknown": "gray"}
        
        st.markdown(f"**Ph√°n ƒëo√°n Softmax:** <span style='font-size: 30px; color: white; background-color: {color_map.get(current_pred_label, 'purple')}; padding: 5px; border-radius: 5px;'>{current_pred_label.upper()}</span>", unsafe_allow_html=True)

        st.markdown("---")
        st.subheader("Chi ti·∫øt X√°c su·∫•t Softmax")
        prob_data = {
            "H√†nh vi": CLASSES,
            "X√°c su·∫•t": [f"{p*100:.2f}%" for p in probs]
        }
        st.table(prob_data)

st.markdown("---")
st.subheader("Tham s·ªë M√¥ h√¨nh")
col_model1, col_model2 = st.columns(2)
col_model1.metric("S·ªë l·ªõp", len(CLASSES))
col_model2.metric("S·ªë ƒë·∫∑c tr∆∞ng (W.shape[0])", W.shape[0])

# C·∫£nh b√°o v·ªÅ t√≠nh nƒÉng "L√†m m∆∞·ª£t"
st.warning("‚ö†Ô∏è **L∆∞u √Ω:** Ch·ª©c nƒÉng **L√†m m∆∞·ª£t (Smoothing)** b·∫±ng `pred_queue` (deque) kh√¥ng ƒë∆∞·ª£c m√¥ ph·ªèng trong giao di·ªán tƒ©nh n√†y v√¨ n√≥ y√™u c·∫ßu m·ªôt lu·ªìng d·ªØ li·ªáu th·ªùi gian th·ª±c v√† l·ªãch s·ª≠.")
